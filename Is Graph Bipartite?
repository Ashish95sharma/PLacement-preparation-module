class Solution {
    private:
    bool check(int color[],vector<vector<int>>& graph, int k)
    {
        queue<int>q;
        q.push(k);
        color[k]=0;

        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            for(auto it: graph[node])
            {
                if(color[it]==-1)
                {
                    color[it]=!color[node];
                    q.push(it);
                }
                else if(color[it]==color[node])
                {
                    return false;
                }
            }
        }
        return true;

    }
public:
    bool isBipartite(vector<vector<int>>& graph) 
    {
        int size=graph.size();
        int color[size];

        for(int i=0; i<size; i++)
        {
            color[i]=-1;
        }

        for(int i=0; i<size; i++)
        {
            if(color[i]==-1)
            {
                if(check(color, graph, i)==false)
                {
                    return false;
                }
            }

        }
        return true;
    }

};
