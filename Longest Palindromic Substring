class Solution {
public:
    string longestPalindrome(string s) {
        int longest_start = 0;
        int longest_size = 0;

        for (int mid = 0; mid < s.length(); mid++) {

            // check odd with mid at middle
            int i = mid; int j = mid;
            while (i >= 0 && j < s.length() && s[i] == s[j]) {
                i--; j++;
            }
            i++; j--;
            if (j-i+1 > longest_size) {
                longest_size = j-i+1;
                longest_start = i;
            }

            // check even with mid at higher of middle
            i = mid-1; j = mid;
            while (i >= 0 && j < s.length() && s[i] == s[j]) {
                i--; j++;
            }
            i++; j--;
            if (j-i+1 > longest_size) {
                longest_size = j-i+1;
                longest_start = i;
            }
            
        }
        return s.substr(longest_start, longest_size);
    }
};
